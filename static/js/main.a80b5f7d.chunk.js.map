{"version":3,"sources":["UIComponents.js","api.js","LeadGenerationDashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","children","React","createElement","className","CardHeader","_ref2","CardContent","_ref3","CardTitle","_ref4","Select","_ref5","onValueChange","defaultValue","onChange","e","target","value","SelectTrigger","_ref6","SelectValue","_ref7","placeholder","SelectContent","_ref8","Fragment","SelectItem","_ref9","API_BASE_URL","process","REACT_APP_API_BASE_URL","mockData","totalLeads","scheduledLeads","forwardedLeads","deadLeads","queuedLeads","COLORS","LeadGenerationDashboard","timePeriod","setTimePeriod","useState","data","setData","useEffect","async","result","axios","get","params","period","error","console","fetchLeadData","loadData","calculatePercentage","toFixed","pieChartData","name","predictions","predictQueuedOutcomes","totalProcessed","forwardedRatio","deadRatio","predictedForwarded","Math","round","predictedDead","predictedQueued","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","labelLine","outerRadius","fill","dataKey","map","entry","index","Cell","key","length","Tooltip","Legend","BarChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Bar","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a80b5f7d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Card = ({ children }) => (\n  <div className=\"border rounded-lg p-4 shadow-md\">{children}</div>\n);\n\nexport const CardHeader = ({ children }) => (\n  <div className=\"font-bold text-lg mb-2\">{children}</div>\n);\n\nexport const CardContent = ({ children }) => (\n  <div>{children}</div>\n);\n\nexport const CardTitle = ({ children }) => (\n  <h2 className=\"text-xl font-semibold\">{children}</h2>\n);\n\nexport const Select = ({ onValueChange, defaultValue, children }) => (\n  <select \n    onChange={(e) => onValueChange(e.target.value)} \n    defaultValue={defaultValue}\n    className=\"border rounded p-2\"\n  >\n    {children}\n  </select>\n);\n\nexport const SelectTrigger = ({ className, children }) => (\n  <div className={className}>{children}</div>\n);\n\nexport const SelectValue = ({ placeholder }) => (\n  <span>{placeholder}</span>\n);\n\nexport const SelectContent = ({ children }) => (\n  <>{children}</>\n);\n\nexport const SelectItem = ({ value, children }) => (\n  <option value={value}>{children}</option>\n);","import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\nexport const fetchLeadData = async (timePeriod) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/lead-data`, {\n      params: { period: timePeriod }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching lead data:\", error);\n    throw error;\n  }\n};","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './UIComponents';\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { fetchLeadData } from './api';\n\n// Mock data - replace with actual data fetching logic\nconst mockData = {\n  today: {\n    totalLeads: 100,\n    scheduledLeads: 60,\n    forwardedLeads: 40,\n    deadLeads: 10,\n    queuedLeads: 50\n  },\n  yesterday: {\n    totalLeads: 90,\n    scheduledLeads: 55,\n    forwardedLeads: 35,\n    deadLeads: 8,\n    queuedLeads: 47\n  },\n  lastWeek: {\n    totalLeads: 600,\n    scheduledLeads: 400,\n    forwardedLeads: 300,\n    deadLeads: 50,\n    queuedLeads: 250\n  }\n};\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nconst LeadGenerationDashboard = () => {\n  const [timePeriod, setTimePeriod] = useState('today');\n  const [data, setData] = useState(mockData.today);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const result = await fetchLeadData(timePeriod);\n        setData(result);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n        // You might want to set an error state here and display it to the user\n      }\n    };\n    \n    loadData();\n  }, [timePeriod]);\n\n  const calculatePercentage = (value) => ((value / data.totalLeads) * 100).toFixed(2);\n\n\n  const pieChartData = [\n    { name: 'Scheduled', value: data.scheduledLeads },\n    { name: 'Forwarded', value: data.forwardedLeads },\n    { name: 'Dead', value: data.deadLeads },\n    { name: 'Queued', value: data.queuedLeads }\n  ];\n\n  const predictQueuedOutcomes = () => {\n    const totalProcessed = data.forwardedLeads + data.deadLeads;\n    const forwardedRatio = data.forwardedLeads / totalProcessed;\n    const deadRatio = data.deadLeads / totalProcessed;\n    \n    return {\n      predictedForwarded: Math.round(data.queuedLeads * forwardedRatio),\n      predictedDead: Math.round(data.queuedLeads * deadRatio),\n      predictedQueued: data.queuedLeads - Math.round(data.queuedLeads * (forwardedRatio + deadRatio))\n    };\n  };\n\n  const predictions = predictQueuedOutcomes();\n\n  const prepareChartData = () => [\n    { name: 'Total Leads', value: data.totalLeads },\n    { name: 'Scheduled', value: data.scheduledLeads },\n    { name: 'Forwarded', value: data.forwardedLeads },\n    { name: 'Dead', value: data.deadLeads },\n    { name: 'Queued', value: data.queuedLeads },\n  ];\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Lead Generation Dashboard</h1>\n      \n      <Select onValueChange={setTimePeriod} defaultValue={timePeriod}>\n        <SelectTrigger className=\"w-[180px] mb-4\">\n          <SelectValue placeholder=\"Select time period\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"today\">Today</SelectItem>\n          <SelectItem value=\"yesterday\">Yesterday</SelectItem>\n          <SelectItem value=\"lastWeek\">Last 7 days</SelectItem>\n        </SelectContent>\n      </Select>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Total Leads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{data.totalLeads}</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Scheduled Leads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{data.scheduledLeads} ({calculatePercentage(data.scheduledLeads)}%)</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Forwarded Leads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{data.forwardedLeads} ({calculatePercentage(data.forwardedLeads)}%)</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Dead Leads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{data.deadLeads} ({calculatePercentage(data.deadLeads)}%)</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Queued Leads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{data.queuedLeads} ({calculatePercentage(data.queuedLeads)}%)</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>% Scheduled Forwarded</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-3xl font-bold\">{((data.forwardedLeads / data.scheduledLeads) * 100).toFixed(2)}%</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n      <Card>\n        <CardHeader>\n            <CardTitle>Lead Status Distribution</CardTitle>\n        </CardHeader>\n        <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n                <Pie\n                data={pieChartData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                >\n                {pieChartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n                </Pie>\n                <Tooltip />\n                <Legend />\n            </PieChart>\n            </ResponsiveContainer>\n        </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Queued Leads Prediction</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>Predicted to be forwarded: {predictions.predictedForwarded}</p>\n            <p>Predicted to be marked as dead: {predictions.predictedDead}</p>\n            <p>Predicted to remain in queue: {predictions.predictedQueued}</p>\n          </CardContent>\n        </Card>\n      </div>\n      <Card>\n  <CardHeader>\n    <CardTitle>Lead Data Overview</CardTitle>\n  </CardHeader>\n  <CardContent>\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={prepareChartData()}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"value\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  </CardContent>\n</Card>\n    </div>\n  );\n};\n\nexport default LeadGenerationDashboard;","import React from 'react';\nimport LeadGenerationDashboard from './LeadGenerationDashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LeadGenerationDashboard />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}